#每日shares數
output<-aggregate(shares_count~dateTPE,totalPage,mean)
library(knitr)
kable(output, digits=2)
if (!require('ENfacebook')){
install.packages("ENfacebook")
library(Rfacebook)
}
totalPage<-NULL
lastDate<-Sys.Date()
numberOfPost<-30
DateVector<-seq(as.Date("2016-01-01"),lastDate,by="5 days")
DateVectorStr<-as.character(DateVector)
DateVectorStr
token<-'CAAONRvRYQI0BALtoXzxUlnbcy19H5u13GUI9EZCpmKcbZBXZA3LlAZAqsgoJoI851aSFYgiiqT48EZCI9BwOPZC1v4SPZCxFy1XvnLBI7Rh9MOeBMW3nhepTMAMj4lJrZAFW4lehMQvBsAPYVV5St6LsrGL9cROOinCHZAZBPQvjTYGgsx13xOdbZCObHWjWJse8MrbilseTORZAgWOEi9fV3RqR'
for(i in 1:(length(DateVectorStr)-1)){
tempPage<-getPage("tsaiingwen", token,
since = DateVectorStr[i],until = DateVectorStr[i+1])
totalPage<-rbind(totalPage,tempPage)
}
nrow(totalPage)
totalPage$datetime <- as.POSIXct(totalPage$created_time,
format = "%Y-%m-%dT%H:%M:%S+0000",
tz = "GMT")
totalPage$dateTPE <- format(totalPage$datetime, "%Y-%m-%d",
tz = "Asia/Taipei")
totalPage$weekdays <-weekdays(as.Date(totalPage$dateTPE))
#每日發文數分析
output<-aggregate(message~weekdays+dateTPE,totalPage,length)
library(knitr)
kable(output, digits=2)
#每日likes數
output<-aggregate(likes_count~dateTPE,totalPage,mean)
library(knitr)
kable(output, digits=2)
#每日comments數
output<-aggregate(comments_count~dateTPE,totalPage,mean)
library(knitr)
kable(output, digits=2)
#每日shares數
output<-aggregate(shares_count~dateTPE,totalPage,mean)
library(knitr)
kable(output, digits=2)
#讀取蔡英文粉絲團資料
if (!require('ENfacebook')){
install.packages("ENfacebook")
library(ENfacebook)
}
totalPage<-NULL
lastDate<-Sys.Date()
numberOfPost<-30
DateVector<-seq(as.Date("2016-01-01"),lastDate,by="5 days")
DateVectorStr<-as.character(DateVector)
DateVectorStr
token<-'CAAONRvRYQI0BALtoXzxUlnbcy19H5u13GUI9EZCpmKcbZBXZA3LlAZAqsgoJoI851aSFYgiiqT48EZCI9BwOPZC1v4SPZCxFy1XvnLBI7Rh9MOeBMW3nhepTMAMj4lJrZAFW4lehMQvBsAPYVV5St6LsrGL9cROOinCHZAZBPQvjTYGgsx13xOdbZCObHWjWJse8MrbilseTORZAgWOEi9fV3RqR'
for(i in 1:(length(DateVectorStr)-1)){
tempPage<-getPage("tsaiingwen", token,
since = DateVectorStr[i],until = DateVectorStr[i+1])
totalPage<-rbind(totalPage,tempPage)
}
nrow(totalPage)
totalPage$datetime <- as.POSIXct(totalPage$created_time,
format = "%Y-%m-%dT%H:%M:%S+0000",
tz = "GMT")
totalPage$dateTPE <- format(totalPage$datetime, "%Y-%m-%d",
tz = "Asia/Taipei")
totalPage$weekdays <-weekdays(as.Date(totalPage$dateTPE))
#每日發文數分析
output<-aggregate(message~weekdays+dateTPE,totalPage,length)
library(knitr)
kable(output, digits=2)
#每日likes數
output<-aggregate(likes_count~dateTPE,totalPage,mean)
library(knitr)
kable(output, digits=2)
#每日comments數
output<-aggregate(comments_count~dateTPE,totalPage,mean)
library(knitr)
kable(output, digits=2)
#每日shares數
output<-aggregate(shares_count~dateTPE,totalPage,mean)
library(knitr)
kable(output, digits=2)
install.packages("Rfacebook")  # from CRAN
library(devtools)
install_github("Rfacebook", "pablobarbera", subdir = "Rfacebook")
install.packages("Rfacebook")
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
}
totalPage<-NULL
lastDate<-Sys.Date()
numberOfPost<-30
DateVector<-seq(as.Date("2016-01-01"),lastDate,by="5 days")
DateVectorStr<-as.character(DateVector)
DateVectorStr
token<-'CAAONRvRYQI0BALtoXzxUlnbcy19H5u13GUI9EZCpmKcbZBXZA3LlAZAqsgoJoI851aSFYgiiqT48EZCI9BwOPZC1v4SPZCxFy1XvnLBI7Rh9MOeBMW3nhepTMAMj4lJrZAFW4lehMQvBsAPYVV5St6LsrGL9cROOinCHZAZBPQvjTYGgsx13xOdbZCObHWjWJse8MrbilseTORZAgWOEi9fV3RqR'
for(i in 1:(length(DateVectorStr)-1)){
tempPage<-getPage("tsaiingwen", token,
since = DateVectorStr[i],until = DateVectorStr[i+1])
totalPage<-rbind(totalPage,tempPage)
}
nrow(totalPage)
totalPage$datetime <- as.POSIXct(totalPage$created_time,
format = "%Y-%m-%dT%H:%M:%S+0000",
tz = "GMT")
totalPage$dateTPE <- format(totalPage$datetime, "%Y-%m-%d",
tz = "Asia/Taipei")
totalPage$weekdays <-weekdays(as.Date(totalPage$dateTPE))
#每日發文數分析
output<-aggregate(message~weekdays+dateTPE,totalPage,length)
library(knitr)
kable(output, digits=2)
#每日likes數
output<-aggregate(likes_count~dateTPE,totalPage,mean)
library(knitr)
kable(output, digits=2)
#每日comments數
output<-aggregate(comments_count~dateTPE,totalPage,mean)
library(knitr)
kable(output, digits=2)
#每日shares數
output<-aggregate(shares_count~dateTPE,totalPage,mean)
library(knitr)
kable(output, digits=2)
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
}
totalPage<-NULL
lastDate<-Sys.Date()
numberOfPost<-30
DateVector<-seq(as.Date("2016-01-01"),lastDate,by="5 days")
DateVectorStr<-as.character(DateVector)
DateVectorStr
totalPage<-NULL
lastDate<-Sys.Date()
numberOfPost<-30
DateVector<-seq(as.Date("2016-01-01"),lastDate,by="5 days")
DateVectorStr<-as.character(DateVector)
DateVectorStr
token<-'CAAONRvRYQI0BAEDLHd9BkeOn1OlDzaZBUXCsZCk96EBBqXgHZCkxs3E9hRuS5DGaiQ4LGjWXHBxSLdC8yZAbPp2JazO8bKnAujsD08qbFfiHh2GGWZBdukKgZCVOiYgQVopPveC4ofzdCSDCEMSWSSZCCrwZA3ZCWXa1GxEZCOhhn4O1ZB3BYKuIg8mtN0BnWZAwaMl1hJvzCnUt8eYdLZAqDUE1X'
for(i in 1:(length(DateVectorStr)-1)){
tempPage<-getPage("tsaiingwen", token,
since = DateVectorStr[i],until = DateVectorStr[i+1])
totalPage<-rbind(totalPage,tempPage)
}
nrow(totalPage)
totalPage$datetime <- as.POSIXct(totalPage$created_time,
format = "%Y-%m-%dT%H:%M:%S+0000",
tz = "GMT")
totalPage$dateTPE <- format(totalPage$datetime, "%Y-%m-%d",
tz = "Asia/Taipei")
totalPage$weekdays <-weekdays(as.Date(totalPage$dateTPE))
library(knitr)
kable(output, digits=2)
getPage("tsaiingwen",token,n=30)
getPage("tsaiingwen",token,n=30)
totalPage<-NULL
lastDate<-Sys.Date()
numberOfPost<-30
DateVector<-seq(as.Date("2016-01-01"),lastDate,by="5 days")
DateVectorStr<-as.character(DateVector)
DateVectorStr
token<-'CAAONRvRYQI0BALtoXzxUlnbcy19H5u13GUI9EZCpmKcbZBXZA3LlAZAqsgoJoI851aSFYgiiqT48EZCI9BwOPZC1v4SPZCxFy1XvnLBI7Rh9MOeBMW3nhepTMAMj4lJrZAFW4lehMQvBsAPYVV5St6LsrGL9cROOinCHZAZBPQvjTYGgsx13xOdbZCObHWjWJse8MrbilseTORZAgWOEi9fV3RqR'
for(i in 1:(length(DateVectorStr)-1)){
tempPage<-getPage("tsaiingwen", token,
since = DateVectorStr[i],until = DateVectorStr[i+1])
totalPage<-rbind(totalPage,tempPage)
}
nrow(totalPage)
totalPage$datetime <- as.POSIXct(totalPage$created_time,
format = "%Y-%m-%dT%H:%M:%S+0000",
tz = "GMT")
totalPage$dateTPE <- format(totalPage$datetime, "%Y-%m-%d",
tz = "Asia/Taipei")
totalPage$weekdays <-weekdays(as.Date(totalPage$dateTPE))
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
}
totalPage<-NULL
lastDate<-Sys.Date()
numberOfPost<-30
DateVector<-seq(as.Date("2016-01-01"),lastDate,by="5 days")
DateVectorStr<-as.character(DateVector)
DateVectorStr
token<-'CAAONRvRYQI0BALtoXzxUlnbcy19H5u13GUI9EZCpmKcbZBXZA3LlAZAqsgoJoI851aSFYgiiqT48EZCI9BwOPZC1v4SPZCxFy1XvnLBI7Rh9MOeBMW3nhepTMAMj4lJrZAFW4lehMQvBsAPYVV5St6LsrGL9cROOinCHZAZBPQvjTYGgsx13xOdbZCObHWjWJse8MrbilseTORZAgWOEi9fV3RqR'
=======
token<-'CAACEdEose0cBAJ4AvZCZAZAr19afGL1nE4LLA9giON9dTOSvPC6GmAAZBUGvf5ygh6uEMRLQk76Sol9lZA5ZAidVNB5QPBKtZBawHhS5uvvhipjfVvZA1GbaMT79isjdJJZAuuvCrYu4D6gMZC9bRiw3PKE6nJrOqvAbCLOYOcIVJ9FIWngrGzYZBUfDoFfaPZAAvTsZD'
>>>>>>> origin/master
for(i in 1:(length(DateVectorStr)-1)){
tempPage<-getPage("tsaiingwen", token,
since = DateVectorStr[i],until = DateVectorStr[i+1])
totalPage<-rbind(totalPage,tempPage)
}
nrow(totalPage)
<<<<<<< HEAD
totalPage$datetime <- as.POSIXct(totalPage$created_time,
format = "%Y-%m-%dT%H:%M:%S+0000",
tz = "GMT")
totalPage$dateTPE <- format(totalPage$datetime, "%Y-%m-%d",
tz = "Asia/Taipei")
totalPage$weekdays <-weekdays(as.Date(totalPage$dateTPE))
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
}
token<-'CAAONRvRYQI0BAP09cCiPRonuBemgd46ow1x3rYvCzqgoSZBnjrwuWZA1vXEyoRvU0376R0VC36JVyWBP7upvivrnnsJJNpkUqGkAskKhr947Pr21alPZBC4ep5qPT5ZBneUpkxgOg3AKVfcJ01kZC1o4vTcaHQPbXKTNivK3ZAaT0B5A0cACoB89a89GRvVWCufO2rEEfO3cXQiGv4jaB3'
totalPage<-NULL
lastDate<-Sys.Date()
DateVectorStr<-as.character(seq(as.Date("2016-01-01"),lastDate,by="5 days"))
for(i in 1:(length(DateVectorStr)-1)){
tempPage<-getPage("cherngs.y", token,
since = DateVectorStr[i],until = DateVectorStr[i+1])
totalPage<-rbind(totalPage,tempPage)
}
nrow(totalPage)
totalPage$datetime <- as.POSIXct(totalPage$created_time,
format = "%Y-%m-%dT%H:%M:%S+0000",
tz = "GMT")
totalPage$dateTPE <- format(totalPage$datetime, "%Y-%m-%d",
tz = "Asia/Taipei")
totalPage$weekdays <-weekdays(as.Date(totalPage$dateTPE))
=======
View(totalPage)
>>>>>>> origin/master
if (!require('reshape2')){
install.packages("reshape2")
library(reshape2)
}
head(mtcars)
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars,id=c("carname","gear","cyl"),
measure.vars=c("mpg","hp"))
head(carMelt,n=3)
tail(carMelt,n=3)
cylData <- dcast(carMelt, cyl ~ variable)
cylData
cylData <- dcast(carMelt, cyl ~ variable,mean)
cylData
library(SportsAnalytics) #install.packages("SportsAnalytics")
NBA1415<-fetch_NBAPlayerStatistics("14-15")
boxplot(Blocks~Position,data=NBA1415)
library(ggplot2) #install.packages("ggplot2")
qplot(TotalPoints, TotalMinutesPlayed,
facets = .~Position, data = NBA1415)+
stat_smooth(method="glm")
#library(ggplot2) #install.packages("ggplot2")
qplot(TotalRebounds, TotalMinutesPlayed,
facets = .~Position, data = NBA1415)+
stat_smooth(method="glm")
if (!require('datasets')){
install.packages("datasets")
library(datasets)
}
data(cars)
plot(cars$speed, cars$dist)
if (!require('lattice')){
install.packages("lattice")
library(lattice)
}
state <- data.frame(state.x77, region = state.region)
state
if (!require('datasets')){
install.packages("datasets")
library(datasets)
}
data(cars)
plot(cars$speed, cars$dist)
View(cars)
if (!require('lattice')){
install.packages("lattice")
library(lattice)
}
if (!require('lattice')){
install.packages("lattice")
library(lattice)
}
state <- data.frame(state.x77, region = state.region)
state
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
if (!require('ggplot2')){
install.packages("ggplot2")
library(ggplot2)
}
qplot(Life.Exp, Income,facets = .~region, data = state)
state
library(lattice)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2, 2))
library(ggplot2)
data(mpg)
qplot(displ, hwy, data = mpg)
if (!require('ggplot2')){
install.packages("ggplot2")
library(ggplot2)
}
qplot(Life.Exp, Income,facets = .~region, data = state)
qplot(Life.Exp, Income,facets = region.~, data = state)
qplot(Life.Exp, Income,facets = region .~, data = state)
qplot(Life.Exp, Income,facets = region.~, data = state)
qplot(Life.Exp, Income,facets = region~., data = state)
qplot(Life.Exp, Income,facets = .~region, data = state)
qplot(Life.Exp, Income,facets = region~., data = state)
library(datasets)
hist(airquality$Ozone)  ## Draw a new plot
library(datasets)
with(airquality, plot(Wind, Ozone))
library(datasets)
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
polio<-read.csv("POLIO_Incidence.csv",stringsAsFactors=F)
head(polio)
polio<-read.csv("POLIO_Incidence.csv",stringsAsFactors=F)
head(polio)
polio.m<-melt(polio,id.vars = c('YEAR','WEEK'))
head(polio.m)
polio.m<-melt(polio,id.vars=c('YEAR','WEEK'))
head(polio.m)
polio.m<-melt(polio,id.vars=c('YEAR','WEEK'))
head(polio.m)
polio<-read.csv("POLIO_Incidence.csv",stringsAsFactors=F)
head(polio)
polio.m[polio.m$value=="-",]$value<-NA#處理缺值,將"-"轉為NA
polio.m$value<-as.numeric(polio.m$value)#將value欄位轉為數字
polio.sumYear<-#各州各年度加總,計算該年度的總發生率
aggregate(value~YEAR+variable,data=polio.m,FUN=sum,na.rm=F)
head(polio.sumYear)
polio.m<-melt(polio,id.vars=c('YEAR','WEEK'))
head(polio.m)
dataMatrix <- as.matrix(dataFrame)[sample(1:12),]
wss <- (nrow(dataMatrix)-1)*sum(apply(dataMatrix,2,var))
for (i in 2:(nrow(dataMatrix)-1)) {
wss[i] <- sum(kmeans(dataMatrix,centers=i)$withinss)
}
par(mfrow=c(1,1), mar = c(4,4,1,1)) #下,左,上,右
plot(1:(nrow(dataMatrix)-1), wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
x<-scale(mtcars$hp[-1]);y<-scale(mtcars$mpg[-1])
dataFrame <- data.frame(x,y)
kmeansObj <- kmeans(dataFrame,centers=4)
par(mar=rep(0.2,4),mfrow=c(1,1))
plot(x,y,col=kmeansObj$cluster,pch=19,cex=2)
points(kmeansObj$centers,col=1:4,pch=3,cex=3,lwd=3)
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "steelblue") #數值低：白色
ggplot(polio.sumYear)+ #資料為polio.sumYear
geom_line(aes(x=YEAR,y=value,color=variable))+ #geom_line:畫折線圖
geom_vline(xintercept = 1955,colour="black", linetype = "longdash")
if(!require('ggplot')){#forfortify()
install.packages("ggplot");library(rgdal)
}
if(!require('ggplot')){#forfortify()
install.packages("ggplot");library(ggplot)
}
polio.m<-melt(polio,id.vars=c('YEAR','WEEK'))
head(polio.m)
library(reshape2)#formelt()
polio.m<-melt(polio,id.vars=c('YEAR','WEEK'))
head(polio.m)
polio.m[polio.m$value=="-",]$value<-NA#處理缺值,將"-"轉為NA
polio.m$value<-as.numeric(polio.m$value)#將value欄位轉為數字
polio.sumYear<-#各州各年度加總,計算該年度的總發生率
aggregate(value~YEAR+variable,data=polio.m,FUN=sum,na.rm=F)
head(polio.sumYear)
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "steelblue") #數值低：白色
ggplot(polio.sumYear)+ #資料為polio.sumYear
geom_line(aes(x=YEAR,y=value,color=variable))+ #geom_line:畫折線圖
geom_vline(xintercept = 1955,colour="black", linetype = "longdash")
if(!require('ggplot')){#forfortify()
install.packages("ggplot");library(ggplot)
}
polio.m[polio.m$value=="-",]$value<-NA#處理缺值,將"-"轉為NA
polio.m$value<-as.numeric(polio.m$value)#將value欄位轉為數字
polio.sumYear<-#各州各年度加總,計算該年度的總發生率
aggregate(value~YEAR+variable,data=polio.m,FUN=sum,na.rm=F)
head(polio.sumYear)
if(!require('ggplot2')){#forfortify()
install.packages("ggplot2");library(ggplot2)
}
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "steelblue") #數值低：白色
ggplot(polio.sumYear)+ #資料為polio.sumYear
geom_line(aes(x=YEAR,y=value,color=variable))+ #geom_line:畫折線圖
geom_vline(xintercept = 1955,colour="black", linetype = "longdash")
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "blue") #數值低：白色
ggplot(polio.sumYear)+ #資料為polio.sumYear
geom_line(aes(x=YEAR,y=value,color=variable))+ #geom_line:畫折線圖
geom_vline(xintercept = 1955,colour="black", linetype = "longdash")
polio.m[polio.m$value=="-",]$value<-NA#處理缺值,將"-"轉為NA
polio.m$value<-as.numeric(polio.m$value)#將value欄位轉為數字
polio.sumYear<-#各州各年度加總,計算該年度的總發生率
aggregate(value~YEAR+variable,data=polio.m,FUN=sum,na.rm=F)
head(polio.sumYear)
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "blue") #數值低：白色
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "gary",high = "blue") #數值低：白色
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "gray",high = "blue") #數值低：白色
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "gray",high = "black") #數值低：白色
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "gray",high = "black") #數值低：灰色
geom_vline(xintercept=1955,colour="black",linetype="longdash")#疫苗
#讀入SportsAnalytics package
if (!require('SportsAnalytics')){
install.packages("SportsAnalytics")
library(SportsAnalytics)
}
#擷取2015-2016年球季球員資料
NBA1516<-fetch_NBAPlayerStatistics("15-16")
library(ggplot2)
ggplot(NBA1516,aes(x=TotalMinutesPlayed,y=TotalPoints))+
geom_point()+geom_smooth(method = "glm")
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "gray",high = "black") #數值低：灰色
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "black") #數值低：白色
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "gray")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "gray",high = "black") #數值低：白色
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "black") #數值低：白色
polio.sumYear<-#各州各年度加總,計算該年度的總發生率
aggregate(value~YEAR+variable,data=polio.m,FUN=sum,na.rm=F)
head(polio.sumYear)
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "black") #數值低：白色
View(polio.m)
str(polio.m)
#讀入SportsAnalytics package
if (!require('SportsAnalytics')){
install.packages("SportsAnalytics")
library(SportsAnalytics)
}
#擷取2015-2016年球季球員資料
NBA1516<-fetch_NBAPlayerStatistics("15-16")
glm(TotalPoints~TotalMinutesPlayed+FieldGoalsAttempted+Position,
data =NBA1516)
# e+01: 10^1 / e-04: 10^(-4)
library(ggplot2)
ggplot(NBA1516,aes(x=TotalMinutesPlayed,y=TotalPoints))+
geom_point()+geom_smooth(method = "glm")
glm(TotalPoints~TotalMinutesPlayed+FieldGoalsAttempted+Position,
data =NBA1516)
# e+01: 10^1 / e-04: 10^(-4)
dataMatrix2 <- as.matrix(mtcars)
## Randomly insert some missing data
dataMatrix2[sample(1:100,size=10,replace=FALSE)] <- NA
head(dataMatrix2,10)
#讀入SportsAnalytics package
if (!require('SportsAnalytics')){
install.packages("SportsAnalytics")
library(SportsAnalytics)
}
#擷取2015-2016年球季球員資料
NBA1516<-fetch_NBAPlayerStatistics("15-16")
library(ggplot2)
ggplot(NBA1516,aes(x=TotalMinutesPlayed,y=TotalPoints))+
geom_point()+geom_smooth(method = "glm")
# formula: Y~X1+X2+...+Xn  Y:依變項 X:自變項
# data: 資料
glm(TotalPoints~TotalMinutesPlayed,data =NBA1516)
# e+01: 10^1 / e-04: 10^(-4)
glm(TotalPoints~TotalMinutesPlayed+FieldGoalsAttempted,
data =NBA1516)
glm(TotalPoints~TotalMinutesPlayed+FieldGoalsAttempted+Position,
data =NBA1516)
# e+01: 10^1 / e-04: 10^(-4)
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "black") #數值低：白色
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "black85") #數值低：白色
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "black") #數值低：白色
ggplot(polio.sumYear, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "black") #數值低：白色
ggplot(polio.sumYear, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+theme_bw()+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "black") #數值低：白色
geom_tile(aes(fill = value),colour = "white")+theme_bw()+ geom_vline(xintercept = 1955) +#geom_tile: 區塊著色
ggplot(polio.sumYear, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+theme_bw()+ geom_vline(xintercept = 1955) +#geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "black") #數值低：白色
ggplot(polio.sumYear, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+theme_bw()+ geom_vline(xintercept = 1955)+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "black") #數值低：白色
ggplot(polio.sumYear, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+theme_bw()+ geom_vline(xintercept = 1955)+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "steelblue") #數值低：白色
