cylData <- dcast(carMelt, cyl ~ variable,mean)
cylData
library(SportsAnalytics) #install.packages("SportsAnalytics")
NBA1415<-fetch_NBAPlayerStatistics("14-15")
boxplot(Blocks~Position,data=NBA1415)
library(ggplot2) #install.packages("ggplot2")
qplot(TotalPoints, TotalMinutesPlayed,
facets = .~Position, data = NBA1415)+
stat_smooth(method="glm")
#library(ggplot2) #install.packages("ggplot2")
qplot(TotalRebounds, TotalMinutesPlayed,
facets = .~Position, data = NBA1415)+
stat_smooth(method="glm")
if (!require('datasets')){
install.packages("datasets")
library(datasets)
}
data(cars)
plot(cars$speed, cars$dist)
if (!require('lattice')){
install.packages("lattice")
library(lattice)
}
state <- data.frame(state.x77, region = state.region)
state
if (!require('datasets')){
install.packages("datasets")
library(datasets)
}
data(cars)
plot(cars$speed, cars$dist)
View(cars)
if (!require('lattice')){
install.packages("lattice")
library(lattice)
}
if (!require('lattice')){
install.packages("lattice")
library(lattice)
}
state <- data.frame(state.x77, region = state.region)
state
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
if (!require('ggplot2')){
install.packages("ggplot2")
library(ggplot2)
}
qplot(Life.Exp, Income,facets = .~region, data = state)
state
library(lattice)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2, 2))
library(ggplot2)
data(mpg)
qplot(displ, hwy, data = mpg)
if (!require('ggplot2')){
install.packages("ggplot2")
library(ggplot2)
}
qplot(Life.Exp, Income,facets = .~region, data = state)
qplot(Life.Exp, Income,facets = region.~, data = state)
qplot(Life.Exp, Income,facets = region .~, data = state)
qplot(Life.Exp, Income,facets = region.~, data = state)
qplot(Life.Exp, Income,facets = region~., data = state)
qplot(Life.Exp, Income,facets = .~region, data = state)
qplot(Life.Exp, Income,facets = region~., data = state)
library(datasets)
hist(airquality$Ozone)  ## Draw a new plot
library(datasets)
with(airquality, plot(Wind, Ozone))
library(datasets)
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
polio<-read.csv("POLIO_Incidence.csv",stringsAsFactors=F)
head(polio)
polio<-read.csv("POLIO_Incidence.csv",stringsAsFactors=F)
head(polio)
polio.m<-melt(polio,id.vars = c('YEAR','WEEK'))
head(polio.m)
polio.m<-melt(polio,id.vars=c('YEAR','WEEK'))
head(polio.m)
polio.m<-melt(polio,id.vars=c('YEAR','WEEK'))
head(polio.m)
polio<-read.csv("POLIO_Incidence.csv",stringsAsFactors=F)
head(polio)
polio.m[polio.m$value=="-",]$value<-NA#處理缺值,將"-"轉為NA
polio.m$value<-as.numeric(polio.m$value)#將value欄位轉為數字
polio.sumYear<-#各州各年度加總,計算該年度的總發生率
aggregate(value~YEAR+variable,data=polio.m,FUN=sum,na.rm=F)
head(polio.sumYear)
polio.m<-melt(polio,id.vars=c('YEAR','WEEK'))
head(polio.m)
dataMatrix <- as.matrix(dataFrame)[sample(1:12),]
wss <- (nrow(dataMatrix)-1)*sum(apply(dataMatrix,2,var))
for (i in 2:(nrow(dataMatrix)-1)) {
wss[i] <- sum(kmeans(dataMatrix,centers=i)$withinss)
}
par(mfrow=c(1,1), mar = c(4,4,1,1)) #下,左,上,右
plot(1:(nrow(dataMatrix)-1), wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
x<-scale(mtcars$hp[-1]);y<-scale(mtcars$mpg[-1])
dataFrame <- data.frame(x,y)
kmeansObj <- kmeans(dataFrame,centers=4)
par(mar=rep(0.2,4),mfrow=c(1,1))
plot(x,y,col=kmeansObj$cluster,pch=19,cex=2)
points(kmeansObj$centers,col=1:4,pch=3,cex=3,lwd=3)
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "steelblue") #數值低：白色
ggplot(polio.sumYear)+ #資料為polio.sumYear
geom_line(aes(x=YEAR,y=value,color=variable))+ #geom_line:畫折線圖
geom_vline(xintercept = 1955,colour="black", linetype = "longdash")
if(!require('ggplot')){#forfortify()
install.packages("ggplot");library(rgdal)
}
if(!require('ggplot')){#forfortify()
install.packages("ggplot");library(ggplot)
}
polio.m<-melt(polio,id.vars=c('YEAR','WEEK'))
head(polio.m)
library(reshape2)#formelt()
polio.m<-melt(polio,id.vars=c('YEAR','WEEK'))
head(polio.m)
polio.m[polio.m$value=="-",]$value<-NA#處理缺值,將"-"轉為NA
polio.m$value<-as.numeric(polio.m$value)#將value欄位轉為數字
polio.sumYear<-#各州各年度加總,計算該年度的總發生率
aggregate(value~YEAR+variable,data=polio.m,FUN=sum,na.rm=F)
head(polio.sumYear)
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "steelblue") #數值低：白色
ggplot(polio.sumYear)+ #資料為polio.sumYear
geom_line(aes(x=YEAR,y=value,color=variable))+ #geom_line:畫折線圖
geom_vline(xintercept = 1955,colour="black", linetype = "longdash")
if(!require('ggplot')){#forfortify()
install.packages("ggplot");library(ggplot)
}
polio.m[polio.m$value=="-",]$value<-NA#處理缺值,將"-"轉為NA
polio.m$value<-as.numeric(polio.m$value)#將value欄位轉為數字
polio.sumYear<-#各州各年度加總,計算該年度的總發生率
aggregate(value~YEAR+variable,data=polio.m,FUN=sum,na.rm=F)
head(polio.sumYear)
if(!require('ggplot2')){#forfortify()
install.packages("ggplot2");library(ggplot2)
}
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "steelblue") #數值低：白色
ggplot(polio.sumYear)+ #資料為polio.sumYear
geom_line(aes(x=YEAR,y=value,color=variable))+ #geom_line:畫折線圖
geom_vline(xintercept = 1955,colour="black", linetype = "longdash")
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "blue") #數值低：白色
ggplot(polio.sumYear)+ #資料為polio.sumYear
geom_line(aes(x=YEAR,y=value,color=variable))+ #geom_line:畫折線圖
geom_vline(xintercept = 1955,colour="black", linetype = "longdash")
polio.m[polio.m$value=="-",]$value<-NA#處理缺值,將"-"轉為NA
polio.m$value<-as.numeric(polio.m$value)#將value欄位轉為數字
polio.sumYear<-#各州各年度加總,計算該年度的總發生率
aggregate(value~YEAR+variable,data=polio.m,FUN=sum,na.rm=F)
head(polio.sumYear)
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "blue") #數值低：白色
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "gary",high = "blue") #數值低：白色
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "gray",high = "blue") #數值低：白色
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "gray",high = "black") #數值低：白色
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "gray",high = "black") #數值低：灰色
geom_vline(xintercept=1955,colour="black",linetype="longdash")#疫苗
#讀入SportsAnalytics package
if (!require('SportsAnalytics')){
install.packages("SportsAnalytics")
library(SportsAnalytics)
}
#擷取2015-2016年球季球員資料
NBA1516<-fetch_NBAPlayerStatistics("15-16")
library(ggplot2)
ggplot(NBA1516,aes(x=TotalMinutesPlayed,y=TotalPoints))+
geom_point()+geom_smooth(method = "glm")
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "gray",high = "black") #數值低：灰色
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "black") #數值低：白色
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "gray")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "gray",high = "black") #數值低：白色
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "black") #數值低：白色
polio.sumYear<-#各州各年度加總,計算該年度的總發生率
aggregate(value~YEAR+variable,data=polio.m,FUN=sum,na.rm=F)
head(polio.sumYear)
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "black") #數值低：白色
View(polio.m)
str(polio.m)
#讀入SportsAnalytics package
if (!require('SportsAnalytics')){
install.packages("SportsAnalytics")
library(SportsAnalytics)
}
#擷取2015-2016年球季球員資料
NBA1516<-fetch_NBAPlayerStatistics("15-16")
glm(TotalPoints~TotalMinutesPlayed+FieldGoalsAttempted+Position,
data =NBA1516)
# e+01: 10^1 / e-04: 10^(-4)
library(ggplot2)
ggplot(NBA1516,aes(x=TotalMinutesPlayed,y=TotalPoints))+
geom_point()+geom_smooth(method = "glm")
glm(TotalPoints~TotalMinutesPlayed+FieldGoalsAttempted+Position,
data =NBA1516)
# e+01: 10^1 / e-04: 10^(-4)
dataMatrix2 <- as.matrix(mtcars)
## Randomly insert some missing data
dataMatrix2[sample(1:100,size=10,replace=FALSE)] <- NA
head(dataMatrix2,10)
#讀入SportsAnalytics package
if (!require('SportsAnalytics')){
install.packages("SportsAnalytics")
library(SportsAnalytics)
}
#擷取2015-2016年球季球員資料
NBA1516<-fetch_NBAPlayerStatistics("15-16")
library(ggplot2)
ggplot(NBA1516,aes(x=TotalMinutesPlayed,y=TotalPoints))+
geom_point()+geom_smooth(method = "glm")
# formula: Y~X1+X2+...+Xn  Y:依變項 X:自變項
# data: 資料
glm(TotalPoints~TotalMinutesPlayed,data =NBA1516)
# e+01: 10^1 / e-04: 10^(-4)
glm(TotalPoints~TotalMinutesPlayed+FieldGoalsAttempted,
data =NBA1516)
glm(TotalPoints~TotalMinutesPlayed+FieldGoalsAttempted+Position,
data =NBA1516)
# e+01: 10^1 / e-04: 10^(-4)
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "black") #數值低：白色
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "black85") #數值低：白色
ggplot(polio.m, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "black") #數值低：白色
ggplot(polio.sumYear, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "black") #數值低：白色
ggplot(polio.sumYear, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+theme_bw()+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "black") #數值低：白色
geom_tile(aes(fill = value),colour = "white")+theme_bw()+ geom_vline(xintercept = 1955) +#geom_tile: 區塊著色
ggplot(polio.sumYear, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+theme_bw()+ geom_vline(xintercept = 1955) +#geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "black") #數值低：白色
ggplot(polio.sumYear, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+theme_bw()+ geom_vline(xintercept = 1955)+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "black") #數值低：白色
ggplot(polio.sumYear, aes(YEAR, variable)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+theme_bw()+ geom_vline(xintercept = 1955)+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "steelblue") #數值低：白色
sample(1:10,3) # 從1到10，隨機取三個數字
sample(1:nrow(NBA1516),nrow(NBA1516)/3) #從第一行到最後一行，隨機取1/3行數
NBA1516$Test<-F #新增一個參數紀錄分組
#隨機取1/3當Test set
NBA1516[sample(1:nrow(NBA1516),nrow(NBA1516)/3),]$Test<-T
# Training set : Test set球員數
c(sum(NBA1516$Test==F),sum(NBA1516$Test==T))
NBA1516$Test<-F #新增一個參數紀錄分組
#隨機取1/3當Test set
NBA1516[sample(1:nrow(NBA1516),nrow(NBA1516)/3),]$Test<-T
# Training set : Test set球員數
c(sum(NBA1516$Test==F),sum(NBA1516$Test==T))
NBA1516$Test<-F #新增一個參數紀錄分組
#隨機取1/3當Test set
NBA1516[sample(1:nrow(NBA1516),nrow(NBA1516)/3),]$Test<-T
# Training set : Test set球員數
c(sum(NBA1516$Test==F),sum(NBA1516$Test==T))
NBA1516$Test<-F #新增一個參數紀錄分組
#隨機取1/3當Test set
NBA1516[sample(1:nrow(NBA1516),nrow(NBA1516)/3),]$Test<-T
# Training set : Test set球員數
c(sum(NBA1516$Test==F),sum(NBA1516$Test==T))
NBA1516$Test<-F #新增一個參數紀錄分組
#隨機取1/3當Test set
NBA1516[sample(1:nrow(NBA1516),nrow(NBA1516)/3),]$Test<-T
# Training set : Test set球員數
c(sum(NBA1516$Test==F),sum(NBA1516$Test==T))
fit<-glm(TotalPoints~TotalMinutesPlayed+FieldGoalsAttempted+
Position+ThreesAttempted+FreeThrowsAttempted,
data =NBA1516[NBA1516$Test==F,])
fit$aic
summary(fit)$coefficients
library(MASS)
##根據AIC，做逐步選擇, 預設倒退學習 direction = "backward"
##trace=FALSE: 不要顯示步驟
finalModel_B<-stepAIC(fit,direction = "backward",trace=FALSE)
summary(finalModel_B)$coefficients
##根據AIC，做逐步選擇, 往前學習 direction = "forward"
finalModel_F<-stepAIC(fit,direction = "forward",trace=FALSE)
summary(finalModel_F)$coefficients
##根據AIC，做逐步選擇, 雙向學習 direction = "both"
finalModel_Both<-stepAIC(fit,direction = "both",trace=FALSE)
summary(finalModel_Both)$coefficients
predictPoint<-predict(finalModel_Both, #Test==T, test data
newdata = NBA1516[NBA1516$Test==T,])
cor(x=predictPoint,y=NBA1516[NBA1516$Test==T,]$TotalPoints) #相關係數
plot(x=predictPoint,y=NBA1516[NBA1516$Test==T,]$TotalPoints)
#讀入SportsAnalytics package
if (!require('SportsAnalytics')){
install.packages("SportsAnalytics")
library(SportsAnalytics)
}
#擷取2015-2016年球季球員資料
NBA1516<-fetch_NBAPlayerStatistics("15-16")
NBA1516<-NBA1516[complete.cases(NBA1516),]
View(NBA1516)
NBA1516$Test<-F #新增一個參數紀錄分組
#隨機取1/3當Test set
NBA1516[sample(1:nrow(NBA1516),nrow(NBA1516)/3),]$Test<-T
# Training set : Test set球員數
c(sum(NBA1516$Test==F),sum(NBA1516$Test==T))
fit<-glm(TotalPoints~TotalMinutesPlayed+FieldGoalsAttempted+
Position+ThreesAttempted+FreeThrowsAttempted,
data =NBA1516[NBA1516$Test==F,])
fit$aic
summary(fit)$coefficients
library(MASS)
finalModel_B<-stepAIC(fit,direction = "backward",trace=FALSE)
library(MASS)
##根據AIC，做逐步選擇, 預設倒退學習 direction = "backward"
##trace=FALSE: 不要顯示步驟
finalModel_B<-stepAIC(fit,direction = "backward",trace=FALSE)
summary(finalModel_B)$coefficients
predictPoint<-predict(finalModel_Both, #Test==T, test data
newdata = NBA1516[NBA1516$Test==T,])
cor(x=predictPoint,y=NBA1516[NBA1516$Test==T,]$TotalPoints) #相關係數
plot(x=predictPoint,y=NBA1516[NBA1516$Test==T,]$TotalPoints)
mydata <- read.csv("http://www.ats.ucla.edu/stat/data/binary.csv")
mydata$admit <- factor(mydata$admit) # 類別變項要轉為factor
mydata$rank <- factor(mydata$rank) # 類別變項要轉為factor
mydata$Test<-F #新增一個參數紀錄分組
mydata[sample(1:nrow(mydata),nrow(mydata)/3),]$Test<-T #隨機取1/3當Test set
c(sum(mydata$Test==F),sum(mydata$Test==T)) # Training set : Test set學生數
#修改一下factor的level: 改成Level 1為錄取，2為不錄取-->Level 1 要放正面答案
mydata$admit<-factor(mydata$admit,levels=c(1,0))
# GRE:某考試成績, GPA:在校平均成績, rank:學校聲望
mylogit <- glm(admit ~ gre + gpa + rank,
data = mydata[mydata$Test==F,], family = "binomial")
finalFit<-stepAIC(mylogit,direction = "both",trace=FALSE) # 雙向逐步選擇模型
summary(finalFit)
AdmitProb<-predict(finalFit, # 用Training set做的模型
newdata = mydata[mydata$Test==T,], #Test==T, test data
type="response") #結果為每個人被錄取的機率
head(AdmitProb)
table(AdmitProb<0.5,mydata[mydata$Test==T,]$admit) # row,column
mydata <- read.csv("http://www.ats.ucla.edu/stat/data/binary.csv")
mydata$admit <- factor(mydata$admit) # 類別變項要轉為factor
mydata$rank <- factor(mydata$rank) # 類別變項要轉為factor
mydata$Test<-F #新增一個參數紀錄分組
mydata[sample(1:nrow(mydata),nrow(mydata)/3),]$Test<-T #隨機取1/3當Test set
c(sum(mydata$Test==F),sum(mydata$Test==T)) # Training set : Test set學生數
#修改一下factor的level: 改成Level 1為錄取，2為不錄取-->Level 1 要放正面答案
mydata$admit<-factor(mydata$admit,levels=c(1,0))
# GRE:某考試成績, GPA:在校平均成績, rank:學校聲望
mylogit <- glm(admit ~ gre + gpa + rank,
data = mydata[mydata$Test==F,], family = "binomial")
finalFit<-stepAIC(mylogit,direction = "both",trace=FALSE) # 雙向逐步選擇模型
summary(finalFit)
AdmitProb<-predict(finalFit, # 用Training set做的模型
newdata = mydata[mydata$Test==T,], #Test==T, test data
type="response") #結果為每個人被錄取的機率
head(AdmitProb)
table(AdmitProb<0.5,mydata[mydata$Test==T,]$admit) # row,column
AdmitProb<-predict(finalFit, # 用Training set做的模型
newdata = mydata[mydata$Test==T,], #Test==T, test data
type="response") #結果為每個人被錄取的機率
head(AdmitProb)
table(AdmitProb<0.5,mydata[mydata$Test==T,]$admit) # row,column
table(AdmitProb<0.5,mydata[mydata$Test==T,]$admit) # row,column
table(AdmitProb<0.5,mydata[mydata$Test==T,]$admit) # row,column
# GRE:某考試成績, GPA:在校平均成績, rank:學校聲望
mylogit <- glm(admit ~ gre + gpa + rank,
data = mydata[mydata$Test==F,], family = "binomial")
finalFit<-stepAIC(mylogit,direction = "both",trace=FALSE) # 雙向逐步選擇模型
summary(finalFit)
mydata <- read.csv("http://www.ats.ucla.edu/stat/data/binary.csv")
mydata$admit <- factor(mydata$admit) # 類別變項要轉為factor
mydata$rank <- factor(mydata$rank) # 類別變項要轉為factor
mydata$Test<-F #新增一個參數紀錄分組
mydata[sample(1:nrow(mydata),nrow(mydata)/3),]$Test<-T #隨機取1/3當Test set
c(sum(mydata$Test==F),sum(mydata$Test==T)) # Training set : Test set學生數
#修改一下factor的level: 改成Level 1為錄取，2為不錄取-->Level 1 要放正面答案
mydata$admit<-factor(mydata$admit,levels=c(1,0))
AdmitProb<-predict(finalFit, # 用Training set做的模型
newdata = mydata[mydata$Test==T,], #Test==T, test data
type="response") #結果為每個人被錄取的機率
head(AdmitProb)
table(AdmitProb<0.5,mydata[mydata$Test==T,]$admit) # row,column
#模型說會被錄取11人  但6人落榜
table(AdmitProb<0.5,mydata[mydata$Test==T,]$admit) # row,column
#install.packages("mlbench") # 此package內有很多dataset可練習
library(mlbench)
data(BreastCancer) #單號
str(BreastCancer) #Class: benign良性/malignant陰性
#install.packages("mlbench") # 此package內有很多dataset可練習
library(mlbench)
data(PimaIndiansDiabetes) #雙號
head(PimaIndiansDiabetes) #diabetes: pos陽性/neg陰性
#install.packages("mlbench") # 此package內有很多dataset可練習
library(mlbench)
data(BreastCancer) #雙號
str(BreastCancer) #Class: benign良性/malignant陰性
#install.packages("mlbench") # 此package內有很多dataset可練習
library(mlbench)
data(PimaIndiansDiabetes) #雙號
head(PimaIndiansDiabetes) #diabetes: pos陽性/neg陰性
#install.packages("mlbench") # 此package內有很多dataset可練習
library(mlbench)
data(BreastCancer) #雙號
head(BreastCancer) #Class: benign良性/malignant陰性
# 雙號
BreastCancerC<-BreastCancer[complete.cases(BreastCancer), # 選資料完整的row
!names(BreastCancer) %in% c("Id")] #把Id拿掉
c(nrow(BreastCancer),nrow(BreastCancerC))
PimaIndiansDiabetesC<- #雙號
PimaIndiansDiabetes[complete.cases(PimaIndiansDiabetes),] # 選資料完整的row
c(nrow(PimaIndiansDiabetes),nrow(PimaIndiansDiabetesC))
BreastCancerC$Test<-F #新增一個參數紀錄分組
#隨機取1/3當Test set
BreastCancerC[
sample(1:nrow(BreastCancerC),nrow(BreastCancerC)/3),
]$Test<-T
# 看一下 Training set : Test set 病人數
c(sum(BreastCancerC$Test==F),sum(BreastCancerC$Test==T))
if (!require('rpart')){
install.packages("rpart"); library(rpart)
}
DT<-rpart(Position~Blocks+TotalRebounds+ThreesMade+Assists+Steals,
data=NBA1516[NBA1516$Test==F,]) #訓練組 Training set
#控球後衛（PG）、得分後衛（SG）、小前鋒（SF）、大前鋒（PF）和中鋒（C）
DT
if (!require('rpart.plot')){
install.packages("rpart.plot"); library(rpart.plot)
}
prp(DT)	# 把決策樹畫出來
prp(DT)
if (!require('rpart.plot')){
install.packages("rpart.plot"); library(rpart.plot)
}
prp(DT)	# 把決策樹畫出來
prp(DT)
prp(DT)
posPred<-predict(DT,newdata= NBA1516[NBA1516$Test==T,]) #Test==T, test data
# 預設為class probabilities, type = "prob"
head(posPred)
result<-cbind(round(posPred,digits = 2),
NBA1516[NBA1516$Test==T,]$Name,
as.character(NBA1516[NBA1516$Test==T,]$Position))
head(result)
posPred<-predict(DT,newdata= NBA1516[NBA1516$Test==T,]) #Test==T, test data
# 預設為class probabilities, type = "prob"
head(posPred)
posPred<-predict(DT,newdata= NBA1516[NBA1516$Test==T,]) #Test==T, test data
# 預設為class probabilities, type = "prob"
head(posPred)
result<-cbind(round(posPred,digits = 2),
NBA1516[NBA1516$Test==T,]$Name,
as.character(NBA1516[NBA1516$Test==T,]$Position))
head(result)
posPredC<-predict(DT,newdata= NBA1516[NBA1516$Test==T,],type = "class")
# type = "class" 直接預測類別
head(posPredC)
resultC<-cbind(as.character(posPredC),NBA1516[NBA1516$Test==T,]$Name,
as.character(NBA1516[NBA1516$Test==T,]$Position))
head(resultC)
#install.packages("mlbench") # 此package內有很多dataset可練習
library(mlbench)
data(Sonar)
str(Sonar) #看一下資料型別，有沒有缺值，類別變項是不是factor
library(ggplot2);library(reshape2) #install.packages(c("ggplot2","reshape2"))
Sonar.m<-melt(Sonar,id.vars = c("Class"))
ggplot(Sonar.m)+geom_boxplot(aes(x=Class,y=value))+
facet_wrap(~variable, nrow=5,scales = "free_y") #投影片太小了
Sonar$Test<-F #新增一個參數紀錄分組
#隨機取1/3當Test set
Sonar[sample(1:nrow(Sonar),nrow(Sonar)/3),]$Test<-T
# 看一下 Training set : Test set 案例數
c(sum(Sonar$Test==F),sum(Sonar$Test==T))
fit<-glm(Class~., Sonar[Sonar$Test==F,],family="binomial")
finalFit<-stepAIC(fit,direction = "both",trace = F)
summary(finalFit)$coefficients
posPredC<-predict(DT,newdata= NBA1516[NBA1516$Test==T,],type = "class")
# type = "class" 直接預測類別
head(posPredC)
resultC<-cbind(as.character(posPredC),NBA1516[NBA1516$Test==T,]$Name,
as.character(NBA1516[NBA1516$Test==T,]$Position))
head(resultC)
resultC<-cbind(as.character(posPredC),NBA1516[NBA1516$Test==T,]$Name,
as.character(NBA1516[NBA1516$Test==T,]$Position))
head(resultC)
