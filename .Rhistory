matrix(1:6,nrow=3,ncol=4)
dim(matrix(1:6,nrow=3,ncol=4))
if(!require('SportsAnalytics')){
install.packages("SportsAnalytics")
library(SportsAnalytics)
}
NBA1415<-fetch_NBAPlayerStatistics("14-15")
NBA1415
apply(NBA1415[,c("GamesPlayed","TotalMinutesPlayed","TotalPoints")],2,mean)
FinalOutput<-NULL
for(team in unique(NBA1415$Team)){
selectTeam<-subset(NBA1415,Team==team)
FinalOutput<-rbind(FinalOutput,
selectTeam[
order(selectTeam$TotalPoints,decreasing = T)[1],
c("Name","Team","TotalPoints")])
}
FinalOutput
FinalOutput2<-NULL
for(team in unique(NBA1415$Team)){
selectTeam<-subset(NBA1415,Team==team)
FinalOutput2<-rbind(FinalOutput2,
selectTeam[
order(selectTeam$TotalMinutesPlayed,decreasing = T)[1],
c("Name","Team","TotalMinutesPlayed")])
}
FinalOutput2
#各隊得分王
FinalOutput2<-NULL
for(team in unique(NBA1415$Team)){
selectTeam<-subset(NBA1415,Team==team)
FinalOutput2<-rbind(FinalOutput2,
selectTeam[
order(selectTeam$TotalPoints,decreasing = T)[1],
c("Name","Team","TotalPoints")])
}
FinalOutput2
#各隊最辛苦球員(出戰分鐘數最多)
FinalOutput<-NULL
for(team in unique(NBA1415$Team)){
selectTeam<-subset(NBA1415,Team==team)
FinalOutput<-rbind(FinalOutput,
selectTeam[
order(selectTeam$TotalMinutesPlayed,decreasing = T)[1],
c("Name","Team","TotalMinutesPlayed")])
}
FinalOutput
FinalOutput3<-NULL
for(team in unique(NBA1415$Team)){
selectTeam<-subset(NBA1415,Team==team)
FinalOutput3<-rbind(FinalOutput3,
selectTeam[
order(selectTeam$TotalPoints/TotalMinutesPlayed,decreasing = T)[1],
c("Name","Team","TotalPoints/TotalMinutesPlayed")])
}
FinalOutput3
efficiency <- NBA1415$TotalPoints /NBA1415$TotalMinutesPlayed
efficiency
Maxefficiency<-aggregate(efficiency~Team,NBA1415,max)
Maxefficiency
NBA1415Maxefficiency<-merge(NBA1415,Maxefficiency)
NBA1415Maxefficiency
output3<-NBA1415Maxefficiency[order(NBA1415Maxefficiency$efficiency,decreasing = T),c("Team","Name","efficiency")]
library(knitr)
kable(output3, digits=2)
Highest<- NBA1415$ThreesMade / NBA1415$ThreesAttempted
Highest
MaxHighest<-aggregate(Highest~Team,NBA1415,max)
MaxHighest
NBA1415MaxHighest<-merge(NBA1415,MaxHighest)
NBA1415MaxHighest
output3<-NBA1415MaxHighest[order(NBA1415MaxHighest$Highest,decreasing = T),c("Team","Name","Highest")]
library(knitr)
kable(output3, digits=2)
Highest<- NBA1415$ThreesMade / NBA1415$ThreesAttempted
Highest
MaxHighest<-aggregate(Highest~Team,NBA1415,max)
MaxHighest
NBA1415MaxHighest<-merge(NBA1415,MaxHighest)
NBA1415MaxHighest
output4<-NBA1415MaxHighest[order(NBA1415MaxHighest$Highest,decreasing = T),c("Team","Name","Highest")]
library(knitr)
kable(output4, digits=2)
efficiency <- NBA1415$TotalPoints /NBA1415$TotalMinutesPlayed
efficiency
Maxefficiency<-aggregate(efficiency~Team,NBA1415,max)
Maxefficiency
NBA1415Maxefficiency<-merge(NBA1415,Maxefficiency)
NBA1415Maxefficiency
output3<-NBA1415Maxefficiency[order(NBA1415Maxefficiency$efficiency,decreasing = T),c("Team","Name","efficiency")]
output3
Highest<- NBA1415$ThreesMade / NBA1415$ThreesAttempted
Highest
MaxHighest<-aggregate(Highest~Team,NBA1415,max)
MaxHighest
NBA1415MaxHighest<-merge(NBA1415,MaxHighest)
NBA1415MaxHighest
FinalOutput4<-NBA1415MaxHighest[order(NBA1415MaxHighest$Highest,decreasing = T),c("Team","Name","Highest")]
FinalOutput4
MaxHighest
knitr::opts_chunk$set(echo = TRUE)
#各隊最辛苦球員(出戰分鐘數最多)
FinalOutput<-NULL
for(team in unique(NBA1415$Team)){
selectTeam<-subset(NBA1415,Team==team)
FinalOutput<-rbind(FinalOutput,
selectTeam[
order(selectTeam$TotalMinutesPlayed,decreasing = T)[1],
c("Name","Team","TotalMinutesPlayed")])
}
FinalOutput
library(knitr)
kable(output4, digits=2)
FinalOutput<-NULL
for(team in unique(NBA1415$Team)){
selectTeam<-subset(NBA1415,Team==team)
FinalOutput<-rbind(FinalOutput,
selectTeam[
order(selectTeam$TotalMinutesPlayed,decreasing = T)[1],
c("Name","Team","TotalMinutesPlayed")])
}
FinalOutput
FinalOutput<-NULL
for(team in unique(NBA1415$Team)){
selectTeam<-subset(NBA1415,Team==team)
FinalOutput<-rbind(FinalOutput,
selectTeam[
order(selectTeam$TotalMinutesPlayed,decreasing = T)[1],
c("Name","Team","TotalMinutesPlayed")])
}
FinalOutput
library(knitr)
kable(FinalOutput, digits=2)
#各隊得分王
FinalOutput2<-NULL
for(team in unique(NBA1415$Team)){
selectTeam<-subset(NBA1415,Team==team)
FinalOutput2<-rbind(FinalOutput2,
selectTeam[
order(selectTeam$TotalPoints,decreasing = T)[1],
c("Name","Team","TotalPoints")])
}
FinalOutput2
library(knitr)
kable(FinalOutput2, digits=2)
efficiency <- NBA1415$TotalPoints /NBA1415$TotalMinutesPlayed
efficiency
Maxefficiency<-aggregate(efficiency~Team,NBA1415,max)
Maxefficiency
NBA1415Maxefficiency<-merge(NBA1415,Maxefficiency)
NBA1415Maxefficiency
FinalOutput3<-NBA1415Maxefficiency[order(NBA1415Maxefficiency$efficiency,decreasing = T),c("Team","Name","efficiency")]
FinalOutput3
library(knitr)
kable(FinalOutput3, digits=2)
#各隊三分球出手最準的球員(ThreesMade/ThreesAttempted 最高)
Highest<- NBA1415$ThreesMade / NBA1415$ThreesAttempted
Highest
MaxHighest<-aggregate(Highest~Team,NBA1415,max)
MaxHighest
NBA1415MaxHighest<-merge(NBA1415,MaxHighest)
NBA1415MaxHighest
FinalOutput4<-NBA1415MaxHighest[order(NBA1415MaxHighest$Highest,decreasing = T),c("Team","Name","Highest")]
FinalOutput4
library(knitr)
kable(output4, digits=2)
Highest<- NBA1415$ThreesMade / NBA1415$ThreesAttempted
Highest
MaxHighest<-aggregate(Highest~Team,NBA1415,max)
MaxHighest
NBA1415MaxHighest<-merge(NBA1415,MaxHighest)
NBA1415MaxHighest
FinalOutput4<-NBA1415MaxHighest[order(NBA1415MaxHighest$Highest,decreasing = T),c("Team","Name","Highest")]
FinalOutput4
library(knitr)
kable(FinalOutput4, digits=2)
FinalOutput2<-NULL
for(team in unique(NBA1415$Team)){
selectTeam<-subset(NBA1415,Team==team)
FinalOutput2<-rbind(FinalOutput2,
selectTeam[
order(selectTeam$TotalPoints,decreasing = T),c("Name","Team","TotalPoints")])
}
FinalOutput2
library(knitr)
kable(FinalOutput2, digits=2)
FinalOutput2<-NULL
for(team in unique(NBA1415$Team)){
selectTeam<-subset(NBA1415,Team==team)
FinalOutput2<-rbind(FinalOutput2,
selectTeam[
order(selectTeam$TotalPoints,decreasing = T)[1],
c("Name","Team","TotalPoints")])
}
FinalOutput2
library(knitr)
kable(FinalOutput2, digits=2)
FinalOutput2<-NULL
MaxPoint<-aggregate(TotalPoints~Team,NBA1415,max)
NBA1415MaxPoint<-merge(NBA1415,MaxPoint)
FinalOutput2<-NBA1415MaxPoint[order(NBA1415MaxPoint$TotalPoints,decreasing = T),c("Team","Name","TotalPoints")]
library(knitr)
kable(FinalOutput2, digits=2)
#各隊三分球出手最準的球員(ThreesMade/ThreesAttempted 最高)
Highest<- NBA1415$ThreesMade / NBA1415$ThreesAttempted
MaxHighest<-aggregate(Highest~Team,NBA1415,max)
NBA1415MaxHighest<-merge(NBA1415,MaxHighest)
FinalOutput4<-NBA1415MaxHighest[order(NBA1415MaxHighest$Highest,decreasing = T),c("Team","Name","Highest")]
library(knitr)
kable(FinalOutput4, digits=2)
#各隊最有效率的球員(總得分/出戰分鐘數)
efficiency <- NBA1415$TotalPoints /NBA1415$TotalMinutesPlayed
Maxefficiency<-aggregate(efficiency~Team,NBA1415,max)
NBA1415Maxefficiency<-merge(NBA1415,Maxefficiency)
FinalOutput3<-NBA1415Maxefficiency[order(NBA1415Maxefficiency$efficiency,decreasing = T),c("Team","Name","efficiency")]
library(knitr)
kable(FinalOutput3, digits=2)
NBA1415$Efficiency <- NBA1415$TotalPoints / NBA1415$TotalMinutesPlayed
MaxEfficiency<-aggregate(Efficiency~Team,NBA1415,max)
NBA1415MaxEfficiency<-merge(NBA1415,MaxEfficiency)
output<-NBA1415MaxEfficiency[order(NBA1415MaxEfficiency$Efficiency,decreasing = T),c("Team","Name","Efficiency")]
library(knitr)
kable(output, digits=2)
NBA1415$Efficiency <- NBA1415$TotalPoints / NBA1415$TotalMinutesPlayed
MaxEfficiency<-aggregate(Efficiency~Team,NBA1415,max)
NBA1415MaxEfficiency<-merge(NBA1415,MaxEfficiency)
FinalOutput3<-NBA1415MaxEfficiency[order(NBA1415MaxEfficiency$Efficiency,decreasing = T),c("Team","Name","Efficiency")]
library(knitr)
kable(FinalOutput3, digits=2)
NBA1415$ThreesHigh <- NBA1415$ThreesMade / NBA1415$ThreesAttempted
MaxThreesHigh<-aggregate(ThreesHigh~Team,NBA1415,max)
NBA1415MaxThreesHigh<-merge(NBA1415,MaxThreesHigh)
FinalOutput4<-NBA1415MaxThreesHigh[order(NBA1415MaxThreesHigh$ThreesHigh,decreasing = T),c("Team","Name","ThreesHigh")]
library(knitr)
kable(FinalOutput4, digits=2)
if (!require('httr')){
install.packages("httr")
library(httr)
}
if (!require('httr')){
install.packages("httr")
library(httr)
}
#put your token
token<-"CAAONRvRYQI0BALtoXzxUlnbcy19H5u13GUI9EZCpmKcbZBXZA3LlAZAqsgoJoI851aSFYgiiqT48EZCI9BwOPZC1v4SPZCxFy1XvnLBI7Rh9MOeBMW3nhepTMAMj4lJrZAFW4lehMQvBsAPYVV5St6LsrGL9cROOinCHZAZBPQvjTYGgsx13xOdbZCObHWjWJse8MrbilseTORZAgWOEi9fV3RqR" #put your token
FBData = GET(
paste0("https://graph.facebook.com/v2.5/tsaiingwen?fields=
posts{message,likes.summary(true)}&access_token=",
CAAONRvRYQI0BALtoXzxUlnbcy19H5u13GUI9EZCpmKcbZBXZA3LlAZAqsgoJoI851aSFYgiiqT48EZCI9BwOPZC1v4SPZCxFy1XvnLBI7Rh9MOeBMW3nhepTMAMj4lJrZAFW4lehMQvBsAPYVV5St6LsrGL9cROOinCHZAZBPQvjTYGgsx13xOdbZCObHWjWJse8MrbilseTORZAgWOEi9fV3RqR))
names(FBData)
token<-"CAAONRvRYQI0BALtoXzxUlnbcy19H5u13GUI9EZCpmKcbZBXZA3LlAZAqsgoJoI851aSFYgiiqT48EZCI9BwOPZC1v4SPZCxFy1XvnLBI7Rh9MOeBMW3nhepTMAMj4lJrZAFW4lehMQvBsAPYVV5St6LsrGL9cROOinCHZAZBPQvjTYGgsx13xOdbZCObHWjWJse8MrbilseTORZAgWOEi9fV3RqR" #put your token
FBData = GET(
paste0("https://graph.facebook.com/v2.5/tsaiingwen?fields=
posts{message,likes.summary(true)}&access_token=",
CAAONRvRYQI0BALtoXzxUlnbcy19H5u13GUI9EZCpmKcbZBXZA3LlAZAqsgoJoI851aSFYgiiqT48EZCI9BwOPZC1v4SPZCxFy1XvnLBI7Rh9MOeBMW3nhepTMAMj4lJrZAFW4lehMQvBsAPYVV5St6LsrGL9cROOinCHZAZBPQvjTYGgsx13xOdbZCObHWjWJse8MrbilseTORZAgWOEi9fV3RqR))
names(FBData)
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
}
totalPage<-NULL
lastDate<-Sys.Date()
numberOfPost<-30
DateVector<-seq(as.Date("2016-01-01"),lastDate,by="5 days")
DateVectorStr<-as.character(DateVector)
DateVectorStr
token<-'CAACEdEose0cBAKg3ZADq6fkgstOfBdXaZBKwoHyKP26TidyDMY1oHegYCAnNgOxQ3voaNLTZAj73e0wMHgAZBf8fZAInwSg2DQi6jFQEVSKGzsddHAfwRzTgZAArpvqVCCiWK00v8tRVx4ZAzngKeQMwqqZCU0EeFMDZBuQZC3y7OhRMBixdvYZA36YZBuO4jt8Y8ZCXoIJk2Y3kyyAZDZD'
for(i in 1:(length(DateVectorStr)-1)){
tempPage<-getPage("DoctorKoWJ", token,
since = DateVectorStr[i],until = DateVectorStr[i+1])
totalPage<-rbind(totalPage,tempPage)
}
nrow(totalPage)
totalPage$datetime <- as.POSIXct(totalPage$created_time,
format = "%Y-%m-%dT%H:%M:%S+0000",
tz = "GMT")
totalPage$dateTPE <- format(totalPage$datetime, "%Y-%m-%d",
tz = "Asia/Taipei")
totalPage$weekdays <-weekdays(as.Date(totalPage$dateTPE))
#每日發文數分析
output<-aggregate(message~weekdays+dateTPE,totalPage,length)
library(knitr)
kable(output, digits=2)
#每日likes數
output<-aggregate(likes_count~dateTPE,totalPage,mean)
library(knitr)
kable(output, digits=2)
#每日comments數
output<-aggregate(comments_count~dateTPE,totalPage,mean)
library(knitr)
kable(output, digits=2)
#每日shares數
output<-aggregate(shares_count~dateTPE,totalPage,mean)
library(knitr)
kable(output, digits=2)
if (!require('ENfacebook')){
install.packages("ENfacebook")
library(Rfacebook)
}
totalPage<-NULL
lastDate<-Sys.Date()
numberOfPost<-30
DateVector<-seq(as.Date("2016-01-01"),lastDate,by="5 days")
DateVectorStr<-as.character(DateVector)
DateVectorStr
token<-'CAAONRvRYQI0BALtoXzxUlnbcy19H5u13GUI9EZCpmKcbZBXZA3LlAZAqsgoJoI851aSFYgiiqT48EZCI9BwOPZC1v4SPZCxFy1XvnLBI7Rh9MOeBMW3nhepTMAMj4lJrZAFW4lehMQvBsAPYVV5St6LsrGL9cROOinCHZAZBPQvjTYGgsx13xOdbZCObHWjWJse8MrbilseTORZAgWOEi9fV3RqR'
for(i in 1:(length(DateVectorStr)-1)){
tempPage<-getPage("tsaiingwen", token,
since = DateVectorStr[i],until = DateVectorStr[i+1])
totalPage<-rbind(totalPage,tempPage)
}
nrow(totalPage)
totalPage$datetime <- as.POSIXct(totalPage$created_time,
format = "%Y-%m-%dT%H:%M:%S+0000",
tz = "GMT")
totalPage$dateTPE <- format(totalPage$datetime, "%Y-%m-%d",
tz = "Asia/Taipei")
totalPage$weekdays <-weekdays(as.Date(totalPage$dateTPE))
#每日發文數分析
output<-aggregate(message~weekdays+dateTPE,totalPage,length)
library(knitr)
kable(output, digits=2)
#每日likes數
output<-aggregate(likes_count~dateTPE,totalPage,mean)
library(knitr)
kable(output, digits=2)
#每日comments數
output<-aggregate(comments_count~dateTPE,totalPage,mean)
library(knitr)
kable(output, digits=2)
#每日shares數
output<-aggregate(shares_count~dateTPE,totalPage,mean)
library(knitr)
kable(output, digits=2)
#讀取蔡英文粉絲團資料
if (!require('ENfacebook')){
install.packages("ENfacebook")
library(ENfacebook)
}
totalPage<-NULL
lastDate<-Sys.Date()
numberOfPost<-30
DateVector<-seq(as.Date("2016-01-01"),lastDate,by="5 days")
DateVectorStr<-as.character(DateVector)
DateVectorStr
token<-'CAAONRvRYQI0BALtoXzxUlnbcy19H5u13GUI9EZCpmKcbZBXZA3LlAZAqsgoJoI851aSFYgiiqT48EZCI9BwOPZC1v4SPZCxFy1XvnLBI7Rh9MOeBMW3nhepTMAMj4lJrZAFW4lehMQvBsAPYVV5St6LsrGL9cROOinCHZAZBPQvjTYGgsx13xOdbZCObHWjWJse8MrbilseTORZAgWOEi9fV3RqR'
for(i in 1:(length(DateVectorStr)-1)){
tempPage<-getPage("tsaiingwen", token,
since = DateVectorStr[i],until = DateVectorStr[i+1])
totalPage<-rbind(totalPage,tempPage)
}
nrow(totalPage)
totalPage$datetime <- as.POSIXct(totalPage$created_time,
format = "%Y-%m-%dT%H:%M:%S+0000",
tz = "GMT")
totalPage$dateTPE <- format(totalPage$datetime, "%Y-%m-%d",
tz = "Asia/Taipei")
totalPage$weekdays <-weekdays(as.Date(totalPage$dateTPE))
#每日發文數分析
output<-aggregate(message~weekdays+dateTPE,totalPage,length)
library(knitr)
kable(output, digits=2)
#每日likes數
output<-aggregate(likes_count~dateTPE,totalPage,mean)
library(knitr)
kable(output, digits=2)
#每日comments數
output<-aggregate(comments_count~dateTPE,totalPage,mean)
library(knitr)
kable(output, digits=2)
#每日shares數
output<-aggregate(shares_count~dateTPE,totalPage,mean)
library(knitr)
kable(output, digits=2)
install.packages("Rfacebook")  # from CRAN
library(devtools)
install_github("Rfacebook", "pablobarbera", subdir = "Rfacebook")
install.packages("Rfacebook")
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
}
totalPage<-NULL
lastDate<-Sys.Date()
numberOfPost<-30
DateVector<-seq(as.Date("2016-01-01"),lastDate,by="5 days")
DateVectorStr<-as.character(DateVector)
DateVectorStr
token<-'CAAONRvRYQI0BALtoXzxUlnbcy19H5u13GUI9EZCpmKcbZBXZA3LlAZAqsgoJoI851aSFYgiiqT48EZCI9BwOPZC1v4SPZCxFy1XvnLBI7Rh9MOeBMW3nhepTMAMj4lJrZAFW4lehMQvBsAPYVV5St6LsrGL9cROOinCHZAZBPQvjTYGgsx13xOdbZCObHWjWJse8MrbilseTORZAgWOEi9fV3RqR'
for(i in 1:(length(DateVectorStr)-1)){
tempPage<-getPage("tsaiingwen", token,
since = DateVectorStr[i],until = DateVectorStr[i+1])
totalPage<-rbind(totalPage,tempPage)
}
nrow(totalPage)
totalPage$datetime <- as.POSIXct(totalPage$created_time,
format = "%Y-%m-%dT%H:%M:%S+0000",
tz = "GMT")
totalPage$dateTPE <- format(totalPage$datetime, "%Y-%m-%d",
tz = "Asia/Taipei")
totalPage$weekdays <-weekdays(as.Date(totalPage$dateTPE))
#每日發文數分析
output<-aggregate(message~weekdays+dateTPE,totalPage,length)
library(knitr)
kable(output, digits=2)
#每日likes數
output<-aggregate(likes_count~dateTPE,totalPage,mean)
library(knitr)
kable(output, digits=2)
#每日comments數
output<-aggregate(comments_count~dateTPE,totalPage,mean)
library(knitr)
kable(output, digits=2)
#每日shares數
output<-aggregate(shares_count~dateTPE,totalPage,mean)
library(knitr)
kable(output, digits=2)
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
}
totalPage<-NULL
lastDate<-Sys.Date()
numberOfPost<-30
DateVector<-seq(as.Date("2016-01-01"),lastDate,by="5 days")
DateVectorStr<-as.character(DateVector)
DateVectorStr
totalPage<-NULL
lastDate<-Sys.Date()
numberOfPost<-30
DateVector<-seq(as.Date("2016-01-01"),lastDate,by="5 days")
DateVectorStr<-as.character(DateVector)
DateVectorStr
token<-'CAAONRvRYQI0BAEDLHd9BkeOn1OlDzaZBUXCsZCk96EBBqXgHZCkxs3E9hRuS5DGaiQ4LGjWXHBxSLdC8yZAbPp2JazO8bKnAujsD08qbFfiHh2GGWZBdukKgZCVOiYgQVopPveC4ofzdCSDCEMSWSSZCCrwZA3ZCWXa1GxEZCOhhn4O1ZB3BYKuIg8mtN0BnWZAwaMl1hJvzCnUt8eYdLZAqDUE1X'
for(i in 1:(length(DateVectorStr)-1)){
tempPage<-getPage("tsaiingwen", token,
since = DateVectorStr[i],until = DateVectorStr[i+1])
totalPage<-rbind(totalPage,tempPage)
}
nrow(totalPage)
totalPage$datetime <- as.POSIXct(totalPage$created_time,
format = "%Y-%m-%dT%H:%M:%S+0000",
tz = "GMT")
totalPage$dateTPE <- format(totalPage$datetime, "%Y-%m-%d",
tz = "Asia/Taipei")
totalPage$weekdays <-weekdays(as.Date(totalPage$dateTPE))
library(knitr)
kable(output, digits=2)
getPage("tsaiingwen",token,n=30)
getPage("tsaiingwen",token,n=30)
totalPage<-NULL
lastDate<-Sys.Date()
numberOfPost<-30
DateVector<-seq(as.Date("2016-01-01"),lastDate,by="5 days")
DateVectorStr<-as.character(DateVector)
DateVectorStr
token<-'CAAONRvRYQI0BALtoXzxUlnbcy19H5u13GUI9EZCpmKcbZBXZA3LlAZAqsgoJoI851aSFYgiiqT48EZCI9BwOPZC1v4SPZCxFy1XvnLBI7Rh9MOeBMW3nhepTMAMj4lJrZAFW4lehMQvBsAPYVV5St6LsrGL9cROOinCHZAZBPQvjTYGgsx13xOdbZCObHWjWJse8MrbilseTORZAgWOEi9fV3RqR'
for(i in 1:(length(DateVectorStr)-1)){
tempPage<-getPage("tsaiingwen", token,
since = DateVectorStr[i],until = DateVectorStr[i+1])
totalPage<-rbind(totalPage,tempPage)
}
nrow(totalPage)
totalPage$datetime <- as.POSIXct(totalPage$created_time,
format = "%Y-%m-%dT%H:%M:%S+0000",
tz = "GMT")
totalPage$dateTPE <- format(totalPage$datetime, "%Y-%m-%d",
tz = "Asia/Taipei")
totalPage$weekdays <-weekdays(as.Date(totalPage$dateTPE))
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
}
totalPage<-NULL
lastDate<-Sys.Date()
numberOfPost<-30
DateVector<-seq(as.Date("2016-01-01"),lastDate,by="5 days")
DateVectorStr<-as.character(DateVector)
DateVectorStr
token<-'CAAONRvRYQI0BALtoXzxUlnbcy19H5u13GUI9EZCpmKcbZBXZA3LlAZAqsgoJoI851aSFYgiiqT48EZCI9BwOPZC1v4SPZCxFy1XvnLBI7Rh9MOeBMW3nhepTMAMj4lJrZAFW4lehMQvBsAPYVV5St6LsrGL9cROOinCHZAZBPQvjTYGgsx13xOdbZCObHWjWJse8MrbilseTORZAgWOEi9fV3RqR'
for(i in 1:(length(DateVectorStr)-1)){
tempPage<-getPage("tsaiingwen", token,
since = DateVectorStr[i],until = DateVectorStr[i+1])
totalPage<-rbind(totalPage,tempPage)
}
nrow(totalPage)
totalPage$datetime <- as.POSIXct(totalPage$created_time,
format = "%Y-%m-%dT%H:%M:%S+0000",
tz = "GMT")
totalPage$dateTPE <- format(totalPage$datetime, "%Y-%m-%d",
tz = "Asia/Taipei")
totalPage$weekdays <-weekdays(as.Date(totalPage$dateTPE))
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
}
token<-'CAAONRvRYQI0BAP09cCiPRonuBemgd46ow1x3rYvCzqgoSZBnjrwuWZA1vXEyoRvU0376R0VC36JVyWBP7upvivrnnsJJNpkUqGkAskKhr947Pr21alPZBC4ep5qPT5ZBneUpkxgOg3AKVfcJ01kZC1o4vTcaHQPbXKTNivK3ZAaT0B5A0cACoB89a89GRvVWCufO2rEEfO3cXQiGv4jaB3'
totalPage<-NULL
lastDate<-Sys.Date()
DateVectorStr<-as.character(seq(as.Date("2016-01-01"),lastDate,by="5 days"))
for(i in 1:(length(DateVectorStr)-1)){
tempPage<-getPage("cherngs.y", token,
since = DateVectorStr[i],until = DateVectorStr[i+1])
totalPage<-rbind(totalPage,tempPage)
}
nrow(totalPage)
totalPage$datetime <- as.POSIXct(totalPage$created_time,
format = "%Y-%m-%dT%H:%M:%S+0000",
tz = "GMT")
totalPage$dateTPE <- format(totalPage$datetime, "%Y-%m-%d",
tz = "Asia/Taipei")
totalPage$weekdays <-weekdays(as.Date(totalPage$dateTPE))
